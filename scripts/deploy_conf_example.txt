########################################################################################################################
#                                                                                                                      #
# Below is example content for the config_deploy.json file. It is very important to configure each option properly, as #
# some properties are immutable once on chain. DO NOT INCLUDE THIS COMMENT BLOCK IN THE JSON FILE.                     #
#                                                                                                                      #
# `name`: Name to use for the ERC721 token representing a user's position.                                             #
# `symbol`: Symbol to use for the ERC721 token representing a user's position.                                         #
#                                                                                                                      #
# `weth`: Address of the wrapped native token contract for the chain you are deploying to.                             #
#                                                                                                                      #
# `multisig`: Address to transfer admin roles to at end of script. Leaving set to address zero will skip this step,    #
#     leaving the deployer's address as the admin.                                                                     #
# `rewardToken`: Address of the token this Reliquary deployment is emitting.                                           #
# `emissionRate`: Emission rate of `rewardToken` from the Reliquary each second.                                       #
#                                                                                                                      #
# `pools`: May be of any length (or empty). Each member must have each property defined in the correct order shown.    #
#     `allocPoint`: Amount of allocation points for this pool. The pool will receive emissions proportional to the     #
#         total number of allocation points for all pools.                                                             #
#     `allowPartialWithdrawals`: hether users can withdraw less than their entire position. A value of false will also #
#         disable shift and split functionality. This is useful for adding pools with decreasing levelMultipliers.     #
#     `levelMultipliers`: Multiplier applied to size of positions in each maturity level when calculating rewards.     #
#     `name`: Name of the pool.                                                                                        #
#     `poolToken`: Address for the token this pool takes for deposits.                                                 #
#     `requiredMaturities`: Maturity required, in seconds, for a position to reach each maturity level.                #
#     `rewarderIndex`: Index of the rewarder to use for this pool. -1 for no rewarder contract.                        #
#     `tokenType`: Type of NFTDescriptor to use for this token. Valid values are "normal", "4626", and "pair". Use     #
#         "4626" if `poolToken` is an ERC4626 contract, and "pair" if it is a UniswapV2Pair.                           #
#                                                                                                                      #
# `rewarders`: May be of any length (or empty). Each member must have each property defined in the correct order shown.#
#     `parentIndex`: Index of this rewarder's parent. -1 if this rewarder is a parent. Children must have a later      #
#         index than their parent.                                                                                     #
#     `rewardMultiplier`: Multiplier relative to `rewardToken` to emit of `rewarderToken` where 100% is                #
#         1000000000000000000. Very important to account for `rewardToken` and `rewarderToken` decimals when setting.  #
#     `rewarderToken`: Address of the token this rewarder is emitting.                                                 #
#                                                                                                                      #
########################################################################################################################

{
    "name": "Reliquary Deposit",
    "symbol": "RELIC",

    "weth": "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",

    "multisig": "0x0000000000000000000000000000000000000000",
    "rewardToken": "0x21Ada0D2aC28C3A5Fa3cD2eE30882dA8812279B6",
    "emissionRate": "10000000000",

    "pools": [
        {
            "allocPoint": 100,
            "allowPartialWithdrawals": true,
            "levelMultipliers": [100, 120, 150, 200, 300, 400, 500, 750],
            "name": "USDC Optimizer",
            "poolToken": "0x3d34C680428F05C185ee692A6fA677a494fB787A",
            "requiredMaturities": [0, 86400, 604800, 1209600, 2592000, 7776000, 15552000, 31536000],
            "rewarderIndex": 0,
            "tokenType": "4626"
        },
        {
            "allocPoint": 50,
            "allowPartialWithdrawals": true,
            "levelMultipliers": [100, 120, 150, 200, 300, 400],
            "name": "ETH Optimizer",
            "poolToken": "0x00764a204165db75CC4f7c50CdC7A409b14F995d",
            "requiredMaturities": [0, 86400, 604800, 1209600, 2592000, 7776000],
            "rewarderIndex": -1,
            "tokenType": "4626"
        }
    ],

    "rewarders": [
        {
            "parentIndex": -1,
            "rewardMultiplier": 1000000000000000000,
            "rewarderToken": "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75"
        },
        {
            "parentIndex": 0,
            "rewardMultiplier": 50000000000000,
            "rewarderToken": "0x321162Cd933E2Be498Cd2267a90534A804051b11"
        }
    ]
}
